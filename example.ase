use IO;

class Monad m : Functor m {
  pure: a -> m a;
}

if : [f: Bool -> Type] => (cond: Bool) -> f true -> f false -> f cond
if true  then _    = then
if false _    else = else

cond {f: Bool -> Set} (value: Bool) (then: f true) (otherwise: f false) -> f cond {
  value.match
    (\tt -> then)
    (\ff -> otherwise)
}

class Person {
  name: String;

  sayHello(person): IO () {
    printf "Hello, I'm {}" person.name
  }
}

instance Monad m : Functor m {
  pure (a) {
    Applicative.pure(a)
  }
}

main {
  let person = Person.new "Sofis eu amo vc vc Ã© a pessoa mais importante da minha vida";
  person.sayHello;
  println "Hello, world!";
}
